// This file has been automatically generated by the pattern compiler.
// DO NOT EDIT!

#ifndef MAGNUM2
#define MAGNUM2
#endif 

#define PATCOM_OUTPUT
#include "tester.h"
#include "SubPattern_MAG2.h"

#ifndef PATTERN_INSTRUCTION
#error PATTERN_INSTRUCTION not #defined ("tester.h" should not have "#pragma once").
#endif



/************ pattern "sub_wait_50us" ************/

PATTERN_INITIAL_CONDITIONS( sub_wait_50us )   /* C Code to set initial conditions */
{
}

PATTERN_INSTRUCTIONS( sub_wait_50us )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00000016,0x8000000C,0x00000000,0x08000000,0x00010080,0x0000081F,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00000018,0x00000016,0x00000000,0x00000000,0x00010000,0x0000081F,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( sub_wait_50us )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "Wait_loop1" )
}

PATTERN_MAR_RELOC_UINSTS( sub_wait_50us )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
}

PATTERN_MAR_FUNCB_UINSTS( sub_wait_50us )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 0, sub_wait_50us, 0 )
}

PATTERN_COUNTER_UINSTS( sub_wait_50us )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, sub_wait_50us, 0 )
}

PATTERN_VERSIONS( sub_wait_50us )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( sub_wait_50us )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
}

PATTERN_USED_VIHHS( sub_wait_50us )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( sub_wait_50us )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( sub_wait_50us )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( sub_wait_50us )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( sub_wait_50us )
	INSTRUCTIONS( sub_wait_50us )
	LABELS( sub_wait_50us )
	MAR_RELOC_UINSTS( sub_wait_50us )
	MAR_FUNCB_UINSTS( sub_wait_50us )
	COUNTER_UINSTS( sub_wait_50us )
	VERSIONS( sub_wait_50us )
	USED_TSETS( sub_wait_50us )
	USED_VIHHS( sub_wait_50us )
	ATTRIBUTES( sub_wait_50us )
	HW_REQUIREMENTS( sub_wait_50us )
}



/************ pattern "sub_wait_100us" ************/

PATTERN_INITIAL_CONDITIONS( sub_wait_100us )   /* C Code to set initial conditions */
{
}

PATTERN_INSTRUCTIONS( sub_wait_100us )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00004016,0x8000000C,0x00000000,0x08000000,0x00010080,0x0000081F,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00000018,0x00000016,0x00000000,0x00000000,0x00010000,0x0000081F,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( sub_wait_100us )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "Wait_loop1" )
}

PATTERN_MAR_RELOC_UINSTS( sub_wait_100us )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
}

PATTERN_MAR_FUNCB_UINSTS( sub_wait_100us )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 0, sub_wait_100us, 0 )
}

PATTERN_COUNTER_UINSTS( sub_wait_100us )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, sub_wait_100us, 0 )
}

PATTERN_VERSIONS( sub_wait_100us )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( sub_wait_100us )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
}

PATTERN_USED_VIHHS( sub_wait_100us )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( sub_wait_100us )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( sub_wait_100us )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( sub_wait_100us )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( sub_wait_100us )
	INSTRUCTIONS( sub_wait_100us )
	LABELS( sub_wait_100us )
	MAR_RELOC_UINSTS( sub_wait_100us )
	MAR_FUNCB_UINSTS( sub_wait_100us )
	COUNTER_UINSTS( sub_wait_100us )
	VERSIONS( sub_wait_100us )
	USED_TSETS( sub_wait_100us )
	USED_VIHHS( sub_wait_100us )
	ATTRIBUTES( sub_wait_100us )
	HW_REQUIREMENTS( sub_wait_100us )
}



/************ pattern "sub_wait_5600us" ************/

PATTERN_INITIAL_CONDITIONS( sub_wait_5600us )   /* C Code to set initial conditions */
{
}

PATTERN_INSTRUCTIONS( sub_wait_5600us )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00005016,0x8000000C,0x00000000,0x08000000,0x00010080,0x0000081F,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00000018,0x00000016,0x00000000,0x00000000,0x00010000,0x0000081F,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( sub_wait_5600us )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "Wait_loop1" )
}

PATTERN_MAR_RELOC_UINSTS( sub_wait_5600us )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
}

PATTERN_MAR_FUNCB_UINSTS( sub_wait_5600us )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 0, sub_wait_5600us, 0 )
}

PATTERN_COUNTER_UINSTS( sub_wait_5600us )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, sub_wait_5600us, 0 )
}

PATTERN_VERSIONS( sub_wait_5600us )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( sub_wait_5600us )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
}

PATTERN_USED_VIHHS( sub_wait_5600us )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( sub_wait_5600us )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( sub_wait_5600us )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( sub_wait_5600us )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( sub_wait_5600us )
	INSTRUCTIONS( sub_wait_5600us )
	LABELS( sub_wait_5600us )
	MAR_RELOC_UINSTS( sub_wait_5600us )
	MAR_FUNCB_UINSTS( sub_wait_5600us )
	COUNTER_UINSTS( sub_wait_5600us )
	VERSIONS( sub_wait_5600us )
	USED_TSETS( sub_wait_5600us )
	USED_VIHHS( sub_wait_5600us )
	ATTRIBUTES( sub_wait_5600us )
	HW_REQUIREMENTS( sub_wait_5600us )
}



/************ pattern "sub_wait_time" ************/

PATTERN_INITIAL_CONDITIONS( sub_wait_time )   /* C Code to set initial conditions */
{
}

PATTERN_INSTRUCTIONS( sub_wait_time )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00001016,0x8000000C,0x00000000,0x08000000,0x00010080,0x0000081F,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00000018,0x00000016,0x00000000,0x00000000,0x00010000,0x0000081F,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( sub_wait_time )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "Wait_loop2" )
}

PATTERN_MAR_RELOC_UINSTS( sub_wait_time )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
}

PATTERN_MAR_FUNCB_UINSTS( sub_wait_time )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 0, sub_wait_time, 0 )
}

PATTERN_COUNTER_UINSTS( sub_wait_time )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, sub_wait_time, 0 )
}

PATTERN_VERSIONS( sub_wait_time )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( sub_wait_time )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
}

PATTERN_USED_VIHHS( sub_wait_time )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( sub_wait_time )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( sub_wait_time )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( sub_wait_time )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( sub_wait_time )
	INSTRUCTIONS( sub_wait_time )
	LABELS( sub_wait_time )
	MAR_RELOC_UINSTS( sub_wait_time )
	MAR_FUNCB_UINSTS( sub_wait_time )
	COUNTER_UINSTS( sub_wait_time )
	VERSIONS( sub_wait_time )
	USED_TSETS( sub_wait_time )
	USED_VIHHS( sub_wait_time )
	ATTRIBUTES( sub_wait_time )
	HW_REQUIREMENTS( sub_wait_time )
}



/************ pattern "sub_xaddr_inc" ************/

PATTERN_INITIAL_CONDITIONS( sub_xaddr_inc )   /* C Code to set initial conditions */
{
}

PATTERN_INSTRUCTIONS( sub_xaddr_inc )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00002016,0x8000000C,0x00000000,0x08000000,0x00010080,0x00000037,0x00000000,0x34443400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x00000016,0x00000000,0x00000000,0x00010000,0x00000037,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( sub_xaddr_inc )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "Xaddr_inc" )
}

PATTERN_MAR_RELOC_UINSTS( sub_xaddr_inc )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
}

PATTERN_MAR_FUNCB_UINSTS( sub_xaddr_inc )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 0, sub_xaddr_inc, 0 )
}

PATTERN_COUNTER_UINSTS( sub_xaddr_inc )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, sub_xaddr_inc, 0 )
}

PATTERN_VERSIONS( sub_xaddr_inc )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( sub_xaddr_inc )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
}

PATTERN_USED_VIHHS( sub_xaddr_inc )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( sub_xaddr_inc )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( sub_xaddr_inc )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( sub_xaddr_inc )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( sub_xaddr_inc )
	INSTRUCTIONS( sub_xaddr_inc )
	LABELS( sub_xaddr_inc )
	MAR_RELOC_UINSTS( sub_xaddr_inc )
	MAR_FUNCB_UINSTS( sub_xaddr_inc )
	COUNTER_UINSTS( sub_xaddr_inc )
	VERSIONS( sub_xaddr_inc )
	USED_TSETS( sub_xaddr_inc )
	USED_VIHHS( sub_xaddr_inc )
	ATTRIBUTES( sub_xaddr_inc )
	HW_REQUIREMENTS( sub_xaddr_inc )
}



/************ pattern "sub_wait_1sec" ************/

PATTERN_INITIAL_CONDITIONS( sub_wait_1sec )   /* C Code to set initial conditions */
{
}

PATTERN_INSTRUCTIONS( sub_wait_1sec )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0000A016,0x8000000C,0x00000000,0x08000000,0x00010080,0x0000081F,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00000018,0x00000016,0x00000000,0x00000000,0x00010000,0x0000081F,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( sub_wait_1sec )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "Wait_loop2" )
}

PATTERN_MAR_RELOC_UINSTS( sub_wait_1sec )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
}

PATTERN_MAR_FUNCB_UINSTS( sub_wait_1sec )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 0, sub_wait_1sec, 0 )
}

PATTERN_COUNTER_UINSTS( sub_wait_1sec )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, sub_wait_1sec, 0 )
}

PATTERN_VERSIONS( sub_wait_1sec )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( sub_wait_1sec )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
}

PATTERN_USED_VIHHS( sub_wait_1sec )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( sub_wait_1sec )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( sub_wait_1sec )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( sub_wait_1sec )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( sub_wait_1sec )
	INSTRUCTIONS( sub_wait_1sec )
	LABELS( sub_wait_1sec )
	MAR_RELOC_UINSTS( sub_wait_1sec )
	MAR_FUNCB_UINSTS( sub_wait_1sec )
	COUNTER_UINSTS( sub_wait_1sec )
	VERSIONS( sub_wait_1sec )
	USED_TSETS( sub_wait_1sec )
	USED_VIHHS( sub_wait_1sec )
	ATTRIBUTES( sub_wait_1sec )
	HW_REQUIREMENTS( sub_wait_1sec )
}



/************ pattern "sub_powr_on" ************/

PATTERN_INITIAL_CONDITIONS( sub_powr_on )   /* C Code to set initial conditions */
{
}

PATTERN_INSTRUCTIONS( sub_powr_on )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00002016,0x8000000C,0x00000000,0x08000000,0x00010000,0x00000818,0x00000000,0x34043400,0x004010D0)
	PATTERN_INSTRUCTION(0x00000018,0x00000016,0x00000000,0x00000000,0x00010000,0x00000818,0x00000000,0x34043400,0x004010D0)
}

PATTERN_LABELS( sub_powr_on )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "power_loop" )
}

PATTERN_MAR_RELOC_UINSTS( sub_powr_on )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
}

PATTERN_MAR_FUNCB_UINSTS( sub_powr_on )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 0, sub_powr_on, 0 )
}

PATTERN_COUNTER_UINSTS( sub_powr_on )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, sub_powr_on, 0 )
}

PATTERN_VERSIONS( sub_powr_on )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( sub_powr_on )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
}

PATTERN_USED_VIHHS( sub_powr_on )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( sub_powr_on )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( sub_powr_on )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( sub_powr_on )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( sub_powr_on )
	INSTRUCTIONS( sub_powr_on )
	LABELS( sub_powr_on )
	MAR_RELOC_UINSTS( sub_powr_on )
	MAR_FUNCB_UINSTS( sub_powr_on )
	COUNTER_UINSTS( sub_powr_on )
	VERSIONS( sub_powr_on )
	USED_TSETS( sub_powr_on )
	USED_VIHHS( sub_powr_on )
	ATTRIBUTES( sub_powr_on )
	HW_REQUIREMENTS( sub_powr_on )
}
