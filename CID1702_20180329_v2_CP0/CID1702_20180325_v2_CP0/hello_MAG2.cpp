// This file has been automatically generated by the pattern compiler.
// DO NOT EDIT!

#ifndef MAGNUM2
#define MAGNUM2
#endif 

#define PATCOM_OUTPUT
#include "tester.h"
#include "hello_MAG2.h"

#ifndef PATTERN_INSTRUCTION
#error PATTERN_INSTRUCTION not #defined ("tester.h" should not have "#pragma once").
#endif



/************ pattern "p_hello" ************/

PATTERN_INITIAL_CONDITIONS( p_hello )   /* C Code to set initial conditions */
{
	count(1, amax()); count(2, 8); count(3, 16); count(4, 14); count(5, 5); count(6, 6); count(7, 22); count(8, 0); count(12, 0); xmain(xmax()); ymain(ymax());
}

PATTERN_INSTRUCTIONS( p_hello )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00000018,0x00000018,0x00110000,0x00000000,0x00010000,0x0181883F,0x00000000,0x34043400,0x070010D0)
	PATTERN_INSTRUCTION(0x8000B018,0x00000018,0x00170000,0x00000000,0x00010000,0x0181883F,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00000018,0x00000018,0x00000000,0x00000000,0x00010001,0x0181883F,0x00000000,0x34043400,0x870010D0)
	PATTERN_INSTRUCTION(0x000000B8,0x00000018,0x00000000,0x00000000,0x00010000,0x0181883F,0x00000000,0x34043400,0x870010D0)
	PATTERN_INSTRUCTION(0x0000016C,0x00000018,0x00000000,0x02000000,0x00010000,0x01800800,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x0000500C,0x8028000C,0x00000000,0x0A000000,0x00010000,0x01800800,0x00000000,0x34043400,0x380010D0)
	PATTERN_INSTRUCTION(0x0000B078,0x8030000C,0x00000000,0x08000000,0x28010000,0x01800801,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x40010002,0x01800802,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00003078,0x8040000C,0x00000000,0x08000000,0x40010002,0x01800802,0x00000000,0x34043400,0xBC0010D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x40010003,0x01800802,0x00000000,0x34043400,0x000010D0)
	/* 10 */
	PATTERN_INSTRUCTION(0x00003078,0x8050000C,0x00000000,0x08000000,0x40010003,0x01800802,0x00000000,0x34043400,0xBC0010D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x40010002,0x01800802,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00003078,0x8060000C,0x00000000,0x08000000,0x40010002,0x01800802,0x00000000,0x34043400,0xBC0010D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x40010003,0x01800802,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00003078,0x8070000C,0x00000000,0x08000000,0x40010003,0x01800802,0x00000000,0x34043400,0xBC0010D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x40010002,0x01800802,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00003078,0x8080000C,0x00000000,0x08000000,0x40010002,0x01800802,0x00000000,0x34043400,0xBC0010D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x40010003,0x01800802,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00003078,0x8090000C,0x00000000,0x08000000,0x40010003,0x01800802,0x00000000,0x34043400,0xBC0010D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x40010002,0x01800802,0x00000000,0x34043400,0x000010D0)
	/* 20 */
	PATTERN_INSTRUCTION(0x00003078,0x80A0000C,0x00000000,0x08000000,0x40010002,0x01800802,0x00000000,0x34043400,0xBC0010D0)
	PATTERN_INSTRUCTION(0x000000EC,0x00000018,0x00000000,0x02000000,0x40010003,0x01800802,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x000030F8,0x80B0000C,0x00000000,0x08000000,0x40010003,0x01800802,0x00000000,0x34043400,0xBC0010D0)
	PATTERN_INSTRUCTION(0x8000700C,0x00000018,0x03E60000,0x02000000,0x00010000,0x0180083F,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00C8700E,0x00C0000C,0x00000000,0x08000000,0x00010000,0x0180083F,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00000018,0x00C8000E,0x00000020,0x00000000,0x00010080,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( p_hello )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 5, "diagonal_program_cmd" )
	PATTERN_LABEL( 6, "diagonal_program_EBM" )
	PATTERN_LABEL( 8, "diagonal_program1_datal" )
	PATTERN_LABEL( 10, "diagonal_program1_datah" )
	PATTERN_LABEL( 12, "diagonal_program2_datal" )
	PATTERN_LABEL( 14, "diagonal_program2_datah" )
	PATTERN_LABEL( 16, "diagonal_program3_datal" )
	PATTERN_LABEL( 18, "diagonal_program3_datah" )
	PATTERN_LABEL( 20, "diagonal_program4_datal" )
	PATTERN_LABEL( 22, "diagonal_program4_datah" )
	PATTERN_LABEL( 24, "diagonal_program_dummy_start" )
}

PATTERN_MAR_RELOC_UINSTS( p_hello )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 5 )
	PATTERN_MAR_RELOC_UINST( 6 )
	PATTERN_MAR_RELOC_UINST( 8 )
	PATTERN_MAR_RELOC_UINST( 10 )
	PATTERN_MAR_RELOC_UINST( 12 )
	PATTERN_MAR_RELOC_UINST( 14 )
	PATTERN_MAR_RELOC_UINST( 16 )
	PATTERN_MAR_RELOC_UINST( 18 )
	PATTERN_MAR_RELOC_UINST( 20 )
	PATTERN_MAR_RELOC_UINST( 22 )
	PATTERN_MAR_RELOC_UINST( 24 )
	PATTERN_MAR_RELOC_UINST( 25 )
}

PATTERN_MAR_FUNCB_UINSTS( p_hello )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 25, p_hello, 25 )
	PATTERN_MAR_FUNCB_UINST( 5, p_hello, 5 )
	PATTERN_MAR_FUNCB_UINST( 6, p_hello, 6 )
	PATTERN_MAR_FUNCB_UINST( 8, p_hello, 8 )
	PATTERN_MAR_FUNCB_UINST( 10, p_hello, 10 )
	PATTERN_MAR_FUNCB_UINST( 12, p_hello, 12 )
	PATTERN_MAR_FUNCB_UINST( 14, p_hello, 14 )
	PATTERN_MAR_FUNCB_UINST( 16, p_hello, 16 )
	PATTERN_MAR_FUNCB_UINST( 18, p_hello, 18 )
	PATTERN_MAR_FUNCB_UINST( 20, p_hello, 20 )
	PATTERN_MAR_FUNCB_UINST( 22, p_hello, 22 )
	PATTERN_MAR_FUNCB_UINST( 24, p_hello, 24 )
	PATTERN_MAR_FUNCB_UINST( 1, p_hello, -1 )
	PATTERN_MAR_FUNCB_UINST( 23, p_hello, -1 )
}

PATTERN_COUNTER_UINSTS( p_hello )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 1, p_hello, -1 )
	PATTERN_COUNTER_UINST( 5, p_hello, 5 )
	PATTERN_COUNTER_UINST( 6, p_hello, 6 )
	PATTERN_COUNTER_UINST( 8, p_hello, 8 )
	PATTERN_COUNTER_UINST( 10, p_hello, 10 )
	PATTERN_COUNTER_UINST( 12, p_hello, 12 )
	PATTERN_COUNTER_UINST( 14, p_hello, 14 )
	PATTERN_COUNTER_UINST( 16, p_hello, 16 )
	PATTERN_COUNTER_UINST( 18, p_hello, 18 )
	PATTERN_COUNTER_UINST( 20, p_hello, 20 )
	PATTERN_COUNTER_UINST( 22, p_hello, 22 )
	PATTERN_COUNTER_UINST( 23, p_hello, -1 )
	PATTERN_COUNTER_UINST( 24, p_hello, 24 )
}

PATTERN_VERSIONS( p_hello )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( p_hello )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
}

PATTERN_USED_VIHHS( p_hello )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( p_hello )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( p_hello )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
	PATTERN_HW_REQUIREMENT( ebm, 1 )
}

PATTERN( p_hello )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( p_hello )
	INSTRUCTIONS( p_hello )
	LABELS( p_hello )
	MAR_RELOC_UINSTS( p_hello )
	MAR_FUNCB_UINSTS( p_hello )
	COUNTER_UINSTS( p_hello )
	VERSIONS( p_hello )
	USED_TSETS( p_hello )
	USED_VIHHS( p_hello )
	ATTRIBUTES( p_hello )
	HW_REQUIREMENTS( p_hello )
}
